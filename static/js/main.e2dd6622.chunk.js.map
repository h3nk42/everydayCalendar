{"version":3,"sources":["components/Day.js","components/Month.js","App.js","serviceWorker.js","index.js"],"names":["Day","props","useState","clicked","setClicked","onClick","className","day","Month","month","class","days","map","App","buttonClicked","setButtonClicked","handleClick","returnDays","num","i","push","style","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAwBeA,MApBf,SAAaC,GAAO,IAAD,EAEWC,oBAAS,GAFpB,mBAEZC,EAFY,KAEHC,EAFG,KAenB,OACI,yBAAKC,QAZW,WAChBD,GAAYD,IAWeG,UAAS,eAP7BH,EACP,kBAEA,sBAIoC,iBAApC,IAAiFF,EAAMM,IAAvF,MCKWC,MArBf,SAAeP,GAUX,OACA,yBAAKK,UAAU,eACd,gCAAML,EAAMQ,MAAZ,KACC,yBAAKC,MAAM,kBATHT,EAAMU,KAAKC,KAAK,SAACL,GACnB,OAAO,kBAAC,EAAD,CAAKA,IAAKA,UCsCdM,MA1Cf,WAAgB,IAAD,EAG8BX,oBAAS,GAHvC,mBAGNY,EAHM,KAGSC,EAHT,KAKPC,EAAc,WAClBD,GAAkBD,IAUdG,EAAa,SAACC,GAElB,IADA,IAAIP,EAAO,GACFQ,EAAI,EAAGA,GAAGD,EAAKC,IACtBR,EAAKS,KAAKD,GAEZ,OAAOR,GAGT,OACE,yBAAKL,UAAU,kCAAkCe,MAfzCP,EACN,CAAEQ,gBAAiB,WAEnB,CAAEA,gBAAiB,UAanB,kBAAC,EAAD,CAAOb,MAAO,MAAOE,KAAMM,EAAW,IAAKD,YAAaA,IACxD,kBAAC,EAAD,CAAOP,MAAO,MAAOE,KAAMM,EAAW,IAAKD,YAAaA,IACxD,kBAAC,EAAD,CAAOP,MAAO,MAAOE,KAAMM,EAAW,IAAKD,YAAaA,IACxD,kBAAC,EAAD,CAAOP,MAAO,MAAOE,KAAMM,EAAW,IAAKD,YAAaA,IACxD,kBAAC,EAAD,CAAOP,MAAO,MAAOE,KAAMM,EAAW,IAAKD,YAAaA,IACxD,kBAAC,EAAD,CAAOP,MAAO,MAAOE,KAAMM,EAAW,IAAKD,YAAaA,IACxD,kBAAC,EAAD,CAAOP,MAAO,MAAOE,KAAMM,EAAW,IAAKD,YAAaA,IACxD,kBAAC,EAAD,CAAOP,MAAO,MAAOE,KAAMM,EAAW,IAAKD,YAAaA,IACxD,kBAAC,EAAD,CAAOP,MAAO,MAAOE,KAAMM,EAAW,IAAKD,YAAaA,IACxD,kBAAC,EAAD,CAAOP,MAAO,MAAOE,KAAMM,EAAW,IAAKD,YAAaA,IACxD,kBAAC,EAAD,CAAOP,MAAO,MAAOE,KAAMM,EAAW,IAAKD,YAAaA,IACxD,kBAAC,EAAD,CAAOP,MAAO,MAAOE,KAAMM,EAAW,IAAKD,YAAaA,MC9B1CO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e2dd6622.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport '../App.css'\n\n\nfunction Day(props){\n\nconst [clicked, setClicked] = useState(false)\n\nconst handleClick = () => {\n    setClicked(!clicked)\n}\n\nconst returnClassName = () => {\n    return clicked ?\n    'neumorphism-up '\n    :\n    'neumorphism-pressed'\n}\n\nreturn (\n    <div onClick={handleClick} className={`star ${returnClassName()} flex-center`}> {props.day} </div>\n    )\n}\n\nexport default Day\n\n","import React from 'react';\nimport '../App.css'\nimport Day from './Day'\n\nfunction Month(props){\n\n\n    const renderStars = () => {\n       return props.days.map( (day) => {\n            return <Day day={day}></Day>\n        })\n    }\n\n\n    return (\n    <div className='flex-center'>\n     <h1> {props.month} </h1>\n      <div class=\"star-container\">\n        {renderStars()}\n       \n      </div>\n    </div>\n    )\n}\n\nexport default Month","import React from 'react';\nimport './App.css'\nimport { useState, useEffect } from 'react';\nimport Month from './components/Month'\n\nfunction App() {\n\n\n  const [buttonClicked, setButtonClicked ] = useState(true);\n\n  const handleClick = () => {\n    setButtonClicked(!buttonClicked);\n  }\n\n  const returnBackgroundColor = () => {\n     return buttonClicked ?\n      { backgroundColor: '#0E79B2'}\n      :\n      { backgroundColor: 'black'}\n  }\n\n  const returnDays = (num) => {\n    let days = []\n    for (let i = 1; i<=num; i++) {\n      days.push(i);\n    }\n    return days\n  }\n\n  return (\n    <div className='flex-center-row outer-container' style={returnBackgroundColor()}>\n      <Month month={'jan'} days={returnDays(31)} handleClick={handleClick}/>\n      <Month month={'feb'} days={returnDays(28)} handleClick={handleClick}/>\n      <Month month={'mar'} days={returnDays(31)} handleClick={handleClick}/>\n      <Month month={'apr'} days={returnDays(30)} handleClick={handleClick}/>\n      <Month month={'may'} days={returnDays(31)} handleClick={handleClick}/>\n      <Month month={'jun'} days={returnDays(30)} handleClick={handleClick}/>\n      <Month month={'jul'} days={returnDays(31)} handleClick={handleClick}/>\n      <Month month={'aug'} days={returnDays(31)} handleClick={handleClick}/>\n      <Month month={'sep'} days={returnDays(30)} handleClick={handleClick}/>\n      <Month month={'okt'} days={returnDays(31)} handleClick={handleClick}/>\n      <Month month={'nob'} days={returnDays(30)} handleClick={handleClick}/>\n      <Month month={'dec'} days={returnDays(31)} handleClick={handleClick}/>\n    </div>\n  );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}